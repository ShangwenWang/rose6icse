{
  "repair_end": "2019-08-12 08:13:13.867085", 
  "repair_begin": "2019-08-12 07:50:06.466792", 
  "patches": [
    {
      "diff": "--- /tmp/GenProg_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java\t2019-08-11 19:48:39.465269415 -0400\n+++ /tmp/GenProg_Defects4J_Closure_124/patches_njul/Patch_9/patched/com/google/javascript/jscomp/ExploitAssigns.java\t2019-08-11 20:13:13.768316507 -0400\n@@ -135,22 +135,6 @@\n         case Token.NAME:\n           if (next.isQualifiedName()) {\n             String nextName = next.getQualifiedName();\n-            if (value.isQualifiedName() &&\n-                nextName.equals(value.getQualifiedName())) {\n-              // If the previous expression evaluates to value of a\n-              // qualified name, and that qualified name is used again\n-              // shortly, then we can exploit the assign here.\n-\n-              // Verify the assignment doesn't change its own value.\n-              if (!isSafeReplacement(next, assign)) {\n-                return false;\n-              }\n-\n-              exprParent.removeChild(expr);\n-              expr.removeChild(assign);\n-              parent.replaceChild(next, assign);\n-              return true;\n-            }\n           }\n           return false;\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java", 
          "line": 138, 
          "faulty": "if (value.isQualifiedName() && nextName.equals(value.getQualifiedName())) {\n  if (!isSafeReplacement(next,assign)) {\n    return false;\n  }\n  exprParent.removeChild(expr);\n  expr.removeChild(assign);\n  parent.replaceChild(next,assign);\n  return true;\n}", 
          "type": "Delete", 
          "seed": "int index=-1;"
        }
      ]
    }
  ]
}