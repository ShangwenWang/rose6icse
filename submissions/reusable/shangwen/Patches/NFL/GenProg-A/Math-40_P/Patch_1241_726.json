{
  "repair_end": "2019-08-01 15:20:43.413887", 
  "repair_begin": "2019-08-01 13:59:04.050695", 
  "patches": [
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\t2019-08-01 01:58:07.036907668 -0400\n+++ /tmp/GenProg_Defects4J_Math_40/patches_ezc5/Patch_726/patched/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\t2019-08-01 03:20:42.982821893 -0400\n@@ -296,28 +296,31 @@\n                 System.arraycopy(y, start, y, 0, nbPoints);\n                 signChangeIndex -= start;\n \n-            } else  if (nbPoints == x.length) {\n-\n-                // we have to drop one point in order to insert the new one\n-                nbPoints--;\n-\n-                // keep the tightest bracketing interval as centered as possible\n-                if (signChangeIndex >= (x.length + 1) / 2) {\n-                    // we drop the lowest point, we have to shift the arrays and the index\n-                    System.arraycopy(x, 1, x, 0, nbPoints);\n-                    System.arraycopy(y, 1, y, 0, nbPoints);\n-                    --signChangeIndex;\n-                }\n-\n-            }\n+            } else {\n+\t\t\t\tsignChangeIndex = 2;\n+\t\t\t\tif (nbPoints == x.length) {\n+\t\t\t\t\tnbPoints--;\n+\t\t\t\t\tif (signChangeIndex >= (x.length + 1) / 2) {\n+\t\t\t\t\t\tSystem.arraycopy(x, 1, x, 0, nbPoints);\n+\t\t\t\t\t\tSystem.arraycopy(y, 1, y, 0, nbPoints);\n+\t\t\t\t\t\t--signChangeIndex;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n \n-            // insert the last computed point\n+            yB = nextY;\n+\t\t\t// insert the last computed point\n             //(by construction, we know it lies inside the tightest bracketing interval)\n             System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n             x[signChangeIndex] = nextX;\n             System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n             y[signChangeIndex] = nextY;\n-            ++nbPoints;\n+            if (agingB >= MAXIMAL_AGING) {\n+\t\t\t\ttargetY = -REDUCTION_FACTOR * yA;\n+\t\t\t} else {\n+\t\t\t\ttargetY = 0;\n+\t\t\t}\n+\t\t\t++nbPoints;\n \n             // update the bracketing interval\n             if (nextY * yA <= 0) {\n@@ -390,8 +393,10 @@\n     public double solve(int maxEval, UnivariateFunction f, double min,\n                         double max, double startValue,\n                         AllowedSolution allowedSolution) {\n-        this.allowed = allowedSolution;\n-        return super.solve(maxEval, f, min, max, startValue);\n+        double x1 = getMax();\n+\t\tthis.allowed = allowedSolution;\n+        verifyInterval(min, max);\n+\t\treturn super.solve(maxEval, f, min, max, startValue);\n     }\n \n }\n\n\n--- /tmp/GenProg_Defects4J_Math_40/src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java\t2019-08-01 01:58:03.152725754 -0400\n+++ /tmp/GenProg_Defects4J_Math_40/patches_ezc5/Patch_726/patched/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java\t2019-08-01 03:20:42.986821790 -0400\n@@ -293,7 +293,8 @@\n         try {\n             evaluations.incrementCount();\n         } catch (MaxCountExceededException e) {\n-            throw new TooManyEvaluationsException(e.getMax());\n+            double initial = getStartValue();\n+\t\t\tthrow new TooManyEvaluationsException(e.getMax());\n         }\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", 
          "line": 394, 
          "faulty": "return super.solve(maxEval,f,min,max,startValue);", 
          "type": "InsertBefore", 
          "seed": "verifyInterval(min,max);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java", 
          "line": 296, 
          "faulty": "throw new TooManyEvaluationsException(e.getMax());", 
          "type": "InsertBefore", 
          "seed": "double initial=getStartValue();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", 
          "line": 320, 
          "faulty": "++nbPoints;", 
          "type": "InsertBefore", 
          "seed": "if (agingB >= MAXIMAL_AGING) {\n  targetY=-REDUCTION_FACTOR * yA;\n}\n else {\n  targetY=0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", 
          "line": 393, 
          "faulty": "this.allowed=allowedSolution;", 
          "type": "InsertBefore", 
          "seed": "double x1=getMax();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", 
          "line": 316, 
          "faulty": "System.arraycopy(x,signChangeIndex,x,signChangeIndex + 1,nbPoints - signChangeIndex);", 
          "type": "InsertBefore", 
          "seed": "yB=nextY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", 
          "line": 299, 
          "faulty": "if (nbPoints == x.length) {\n  nbPoints--;\n  if (signChangeIndex >= (x.length + 1) / 2) {\n    System.arraycopy(x,1,x,0,nbPoints);\n    System.arraycopy(y,1,y,0,nbPoints);\n    --signChangeIndex;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "signChangeIndex=2;"
        }
      ]
    }
  ]
}