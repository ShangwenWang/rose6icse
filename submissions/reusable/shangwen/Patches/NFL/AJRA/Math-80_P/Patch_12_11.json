{
  "repair_end": "2019-07-31 18:15:58.511452", 
  "repair_begin": "2019-07-31 18:08:36.368172", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-07-31 06:07:50.009399204 -0400\n+++ /tmp/Arja_Defects4J_Math_80/patches_kh1g/Patch_11/patched/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-07-31 06:15:58.138141948 -0400\n@@ -1059,7 +1059,7 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                dMin = 0.0;\n                 dMin  = -0.0;\n             }\n         }\n@@ -1103,7 +1103,7 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        tType = -8;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "Replace", 
          "seed": "tType=-8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "work[j + 2]=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Replace", 
          "seed": "dMin=0.0;"
        }
      ]
    }
  ]
}