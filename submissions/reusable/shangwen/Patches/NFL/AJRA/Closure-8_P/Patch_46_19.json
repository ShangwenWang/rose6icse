{
  "repair_end": "2019-08-12 02:19:26.921657", 
  "repair_begin": "2019-08-12 01:56:32.939352", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2019-08-11 13:55:05.510546569 -0400\n+++ /tmp/Arja_Defects4J_Closure_8/patches_lr4t/Patch_19/patched/com/google/javascript/jscomp/CollapseVariableDeclarations.java\t2019-08-11 14:19:26.861953431 -0400\n@@ -114,7 +114,6 @@\n \n     if (!collapses.isEmpty()) {\n       applyCollapses();\n-      compiler.reportCodeChange();\n     }\n   }\n \n@@ -207,40 +206,5 @@\n \n \n   private void applyCollapses() {\n-    for (Collapse collapse : collapses) {\n-\n-      Node var = new Node(Token.VAR);\n-      var.copyInformationFrom(collapse.startNode);\n-      collapse.parent.addChildBefore(var, collapse.startNode);\n-\n-      boolean redeclaration = false;\n-      for (Node n = collapse.startNode; n != collapse.endNode;) {\n-        Node next = n.getNext();\n-\n-        Preconditions.checkState(var.getNext() == n);\n-        collapse.parent.removeChildAfter(var);\n-\n-        if (n.isVar()) {\n-          while(n.hasChildren()) {\n-            var.addChildToBack(n.removeFirstChild());\n-          }\n-        } else {\n-          Node assign = n.getFirstChild();\n-          Node lhs = assign.getFirstChild();\n-          Preconditions.checkState(lhs.isName());\n-          Node rhs = assign.getLastChild();\n-          lhs.addChildToBack(rhs.detachFromParent());\n-          var.addChildToBack(lhs.detachFromParent());\n-          redeclaration = true;\n-        }\n-        n = next;\n-      }\n-\n-      if (redeclaration) {\n-        JSDocInfo info = new JSDocInfo();\n-        info.addSuppression(\"duplicate\");\n-        var.setJSDocInfo(info);\n-      }\n-    }\n   }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 117, 
          "faulty": "compiler.reportCodeChange();", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 210, 
          "faulty": "for (Collapse collapse : collapses) {\n  Node var=new Node(Token.VAR);\n  var.copyInformationFrom(collapse.startNode);\n  collapse.parent.addChildBefore(var,collapse.startNode);\n  boolean redeclaration=false;\n  for (Node n=collapse.startNode; n != collapse.endNode; ) {\n    Node next=n.getNext();\n    Preconditions.checkState(var.getNext() == n);\n    collapse.parent.removeChildAfter(var);\n    if (n.isVar()) {\n      while (n.hasChildren()) {\n        var.addChildToBack(n.removeFirstChild());\n      }\n    }\n else {\n      Node assign=n.getFirstChild();\n      Node lhs=assign.getFirstChild();\n      Preconditions.checkState(lhs.isName());\n      Node rhs=assign.getLastChild();\n      lhs.addChildToBack(rhs.detachFromParent());\n      var.addChildToBack(lhs.detachFromParent());\n      redeclaration=true;\n    }\n    n=next;\n  }\n  if (redeclaration) {\n    JSDocInfo info=new JSDocInfo();\n    info.addSuppression(\"duplicate\");\n    var.setJSDocInfo(info);\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 232, 
          "faulty": "lhs.addChildToBack(rhs.detachFromParent());", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 225, 
          "faulty": "var.addChildToBack(n.removeFirstChild());", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", 
          "line": 214, 
          "faulty": "collapse.parent.addChildBefore(var,collapse.startNode);", 
          "type": "Delete", 
          "seed": "break;"
        }
      ]
    }
  ]
}