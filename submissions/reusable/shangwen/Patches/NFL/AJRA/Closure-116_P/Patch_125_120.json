{
  "repair_end": "2019-08-12 12:38:58.990240", 
  "repair_begin": "2019-08-12 12:11:50.447006", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java\t2019-08-12 00:10:31.507106405 -0400\n+++ /tmp/Arja_Defects4J_Closure_116/patches_zern/Patch_120/patched/com/google/javascript/jscomp/FunctionInjector.java\t2019-08-12 00:38:58.922966686 -0400\n@@ -552,7 +552,7 @@\n       // Only inline functions that return something.\n       if (block.getFirstChild().isReturn()\n           && block.getFirstChild().getFirstChild() != null) {\n-        return true;\n+        return false;\n       }\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/jscomp/ExpressionDecomposer.java\t2019-08-12 00:10:28.671109911 -0400\n+++ /tmp/Arja_Defects4J_Closure_116/patches_zern/Patch_120/patched/com/google/javascript/jscomp/ExpressionDecomposer.java\t2019-08-12 00:38:58.930966816 -0400\n@@ -194,22 +194,6 @@\n           && NodeUtil.isGet(parent.getFirstChild())) {\n         Node functionExpression = parent.getFirstChild();\n         decomposeSubExpressions(functionExpression.getNext(), child, state);\n-        // Now handle the call expression\n-        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n-            && functionExpression.getFirstChild() != grandchild) {\n-          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such\n-          // as DOM objects can not be decomposed.\n-          Preconditions.checkState(allowObjectCallDecomposing(),\n-              \"Object method calls can not be decomposed.\");\n-          // Either there were preexisting side-effects, or this node has\n-          // side-effects.\n-          state.sideEffects = true;\n-\n-          // Rewrite the call so \"this\" is preserved.\n-          Node replacement = rewriteCallExpression(parent, state);\n-          // Continue from here.\n-          parent = replacement;\n-        }\n       } else if (parentType == Token.OBJECTLIT) {\n         decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n       } else {\n\n\n--- /tmp/Arja_Defects4J_Closure_116/src/com/google/javascript/rhino/Node.java\t2019-08-12 00:10:28.951109563 -0400\n+++ /tmp/Arja_Defects4J_Closure_116/patches_zern/Patch_120/patched/com/google/javascript/rhino/Node.java\t2019-08-12 00:38:58.938966945 -0400\n@@ -1456,7 +1456,7 @@\n       }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n-        return res;\n+        return null;\n       }\n     }\n     return res;\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/FunctionInjector.java", 
          "line": 555, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "return false;"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java", 
          "line": 198, 
          "faulty": "if (isExpressionTreeUnsafe(functionExpression,state.sideEffects) && functionExpression.getFirstChild() != grandchild) {\n  Preconditions.checkState(allowObjectCallDecomposing(),\"Object method calls can not be decomposed.\");\n  state.sideEffects=true;\n  Node replacement=rewriteCallExpression(parent,state);\n  parent=replacement;\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/rhino/Node.java", 
          "line": 1459, 
          "faulty": "return res;", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }
  ]
}