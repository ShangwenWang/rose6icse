{
  "repair_end": "2019-08-12 11:19:49.109377", 
  "repair_begin": "2019-08-12 10:55:51.492794", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Closure_112/src/com/google/javascript/jscomp/TypeInference.java\t2019-08-11 22:54:21.545844074 -0400\n+++ /tmp/Arja_Defects4J_Closure_112/patches_f37u/Patch_2/patched/com/google/javascript/jscomp/TypeInference.java\t2019-08-11 23:19:49.020314049 -0400\n@@ -1068,48 +1068,8 @@\n       for (JSType alernative : unionType.getAlternates()) {\n         maybeResolveTemplatedType(alernative, argType, resolvedTypes);\n       }\n-    } else if (paramType.isFunctionType()) {\n-      FunctionType paramFunctionType = paramType.toMaybeFunctionType();\n-      FunctionType argFunctionType = argType\n-          .restrictByNotNullOrUndefined()\n-          .collapseUnion()\n-          .toMaybeFunctionType();\n-      if (argFunctionType != null && argFunctionType.isSubtype(paramType)) {\n-        // infer from return type of the function type\n-        maybeResolveTemplatedType(\n-            paramFunctionType.getTypeOfThis(),\n-            argFunctionType.getTypeOfThis(), resolvedTypes);\n-        // infer from return type of the function type\n-        maybeResolveTemplatedType(\n-            paramFunctionType.getReturnType(),\n-            argFunctionType.getReturnType(), resolvedTypes);\n-        // infer from parameter types of the function type\n-        maybeResolveTemplateTypeFromNodes(\n-            paramFunctionType.getParameters(),\n-            argFunctionType.getParameters(), resolvedTypes);\n-      }\n-    } else if (paramType.isTemplatizedType()) {\n-      // @param {Array.<T>}\n-      ObjectType referencedParamType = paramType\n-          .toMaybeTemplatizedType()\n-          .getReferencedType();\n-      JSType argObjectType = argType\n-          .restrictByNotNullOrUndefined()\n-          .collapseUnion();\n-\n-      if (argObjectType.isSubtype(referencedParamType)) {\n-        // If the argument type is a subtype of the parameter type, resolve any\n-        // template types amongst their templatized types.\n-        TemplateTypeMap paramTypeMap = paramType.getTemplateTypeMap();\n-        TemplateTypeMap argTypeMap = argObjectType.getTemplateTypeMap();\n-        for (TemplateType key : paramTypeMap.getTemplateKeys()) {\n-          maybeResolveTemplatedType(\n-              paramTypeMap.getTemplateType(key),\n-              argTypeMap.getTemplateType(key),\n-              resolvedTypes);\n-        }\n-      }\n-    }\n+    } else\n+\t\t;\n   }\n \n   private void maybeResolveTemplateTypeFromNodes(\n@@ -1356,7 +1316,7 @@\n         TemplateTypeMap typeMap = restrictedObjType.getTemplateTypeMap();\n         TemplateTypeMapReplacer replacer = new TemplateTypeMapReplacer(\n             registry, typeMap);\n-        propertyType = propertyType.visit(replacer);\n+        return null;\n       }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/TypeInference.java", 
          "line": 1071, 
          "faulty": "if (paramType.isFunctionType()) {\n  FunctionType paramFunctionType=paramType.toMaybeFunctionType();\n  FunctionType argFunctionType=argType.restrictByNotNullOrUndefined().collapseUnion().toMaybeFunctionType();\n  if (argFunctionType != null && argFunctionType.isSubtype(paramType)) {\n    maybeResolveTemplatedType(paramFunctionType.getTypeOfThis(),argFunctionType.getTypeOfThis(),resolvedTypes);\n    maybeResolveTemplatedType(paramFunctionType.getReturnType(),argFunctionType.getReturnType(),resolvedTypes);\n    maybeResolveTemplateTypeFromNodes(paramFunctionType.getParameters(),argFunctionType.getParameters(),resolvedTypes);\n  }\n}\n else if (paramType.isTemplatizedType()) {\n  ObjectType referencedParamType=paramType.toMaybeTemplatizedType().getReferencedType();\n  JSType argObjectType=argType.restrictByNotNullOrUndefined().collapseUnion();\n  if (argObjectType.isSubtype(referencedParamType)) {\n    TemplateTypeMap paramTypeMap=paramType.getTemplateTypeMap();\n    TemplateTypeMap argTypeMap=argObjectType.getTemplateTypeMap();\n    for (    TemplateType key : paramTypeMap.getTemplateKeys()) {\n      maybeResolveTemplatedType(paramTypeMap.getTemplateType(key),argTypeMap.getTemplateType(key),resolvedTypes);\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "NULL"
        }, 
        {
          "path": "src/com/google/javascript/jscomp/TypeInference.java", 
          "line": 1359, 
          "faulty": "propertyType=propertyType.visit(replacer);", 
          "type": "Replace", 
          "seed": "return null;"
        }
      ]
    }
  ]
}