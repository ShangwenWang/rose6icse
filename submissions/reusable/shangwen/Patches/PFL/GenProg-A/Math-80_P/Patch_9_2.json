{
  "repair_end": "2019-08-01 20:56:45.498200", 
  "repair_begin": "2019-08-01 20:49:48.655643", 
  "patches": [
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-08-01 08:48:56.072067282 -0400\n+++ /tmp/GenProg_Defects4J_Math_80/patches_hsqy/Patch_2/patched/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2019-08-01 08:56:45.109393141 -0400\n@@ -869,7 +869,6 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1090,7 +1089,8 @@\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n                     dMin = 0.0;\n                     updateSigma(tau);\n-                    return deflatedEnd;\n+                    final int upperStart = 5 * main.length;\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1134,11 +1134,15 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                if (tType < -22) {\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\ttType -= 11;\n+\t\t\t\t} else {\n+\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t}\n                 j -= 4;\n             }\n             return true;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "InsertBefore", 
          "seed": "final int upperStart=5 * main.length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "return copy().mapSinToSelf();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ]
    }
  ]
}