{
  "repair_end": "2019-08-13 05:48:44.514615", 
  "repair_begin": "2019-08-13 05:27:30.123676", 
  "patches": [
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Closure_124/src/com/google/javascript/jscomp/ExploitAssigns.java\t2019-08-12 17:26:07.213263784 -0400\n+++ /tmp/RSRepair_Defects4J_Closure_124/patches_onp5/Patch_3/patched/com/google/javascript/jscomp/ExploitAssigns.java\t2019-08-12 17:48:44.483103217 -0400\n@@ -168,16 +168,7 @@\n           // To protect against this, we simply only inline when the left side\n           // is guaranteed to evaluate to the same L-value no matter what.\n           Node leftSide = next.getFirstChild();\n-          if (leftSide.isName() ||\n-              leftSide.isGetProp() &&\n-              leftSide.getFirstChild().isThis()) {\n-            // Dive down the right side of the assign.\n-            parent = next;\n-            next = leftSide.getNext();\n-            break;\n-          } else {\n-            return false;\n-          }\n+          ;\n \n         default:\n           if (NodeUtil.isImmutableValue(next)\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/jscomp/ExploitAssigns.java", 
          "line": 171, 
          "faulty": "if (leftSide.isName() || leftSide.isGetProp() && leftSide.getFirstChild().isThis()) {\n  parent=next;\n  next=leftSide.getNext();\n  break;\n}\n else {\n  return false;\n}", 
          "type": "Delete", 
          "seed": "return this;"
        }
      ]
    }
  ]
}