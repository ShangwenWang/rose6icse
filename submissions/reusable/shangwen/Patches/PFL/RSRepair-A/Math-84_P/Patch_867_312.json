{
  "repair_end": "2019-08-02 22:05:32.786291", 
  "repair_begin": "2019-08-02 21:51:32.471170", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java", 
          "line": 90, 
          "faulty": "if (comparator.compare(contracted,best) < 0) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java", 
          "line": 66, 
          "faulty": "incrementIterationsCounter();", 
          "type": "InsertBefore", 
          "seed": "final double[] xSmallest=simplex[0].getPointRef();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2019-08-03 00:50:34.230549552 -0400\n+++ /tmp/RSRepair_Defects4J_Math_84/patches_d1k6/Patch_312/patched/org/apache/commons/math/optimization/direct/MultiDirectional.java\t2019-08-03 01:05:32.100055900 -0400\n@@ -63,7 +63,8 @@\n \n         while (true) {\n \n-            incrementIterationsCounter();\n+            final double[] xSmallest = simplex[0].getPointRef();\n+\t\t\tincrementIterationsCounter();\n \n             // save the original vertex\n             final RealPointValuePair[] original = simplex;\n@@ -87,12 +88,7 @@\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n+            return;\n \n         }\n \n\n\n"
    }
  ]
}