{
  "repair_end": "2019-08-01 20:52:26.047017", 
  "repair_begin": "2019-08-01 20:08:15.291794", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java", 
          "line": 260, 
          "faulty": "if (signChangeIndex - start >= end - signChangeIndex) {\n  ++start;\n}\n else {\n  --end;\n}", 
          "type": "InsertBefore", 
          "seed": "signChangeIndex=2;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\t2019-08-01 23:07:02.510765984 -0400\n+++ /tmp/RSRepair_Defects4J_Math_40/patches_t4v6/Patch_63/patched/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\t2019-08-01 23:52:24.674656032 -0400\n@@ -254,7 +254,8 @@\n                 if (!((nextX > xA) && (nextX < xB))) {\n                     // the guessed root is not strictly inside of the tightest bracketing interval\n \n-                    // the guessed root is either not strictly inside the interval or it\n+                    signChangeIndex = 2;\n+\t\t\t\t\t// the guessed root is either not strictly inside the interval or it\n                     // is a NaN (which occurs when some sampling points share the same y)\n                     // we try again with a lower interpolation order\n                     if (signChangeIndex - start >= end - signChangeIndex) {\n\n\n"
    }
  ]
}