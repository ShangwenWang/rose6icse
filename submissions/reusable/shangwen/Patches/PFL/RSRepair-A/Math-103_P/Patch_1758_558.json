{
  "repair_end": "2019-08-03 00:31:18.456238", 
  "repair_begin": "2019-08-02 23:55:26.378201", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/java/org/apache/commons/math/special/Gamma.java", 
          "line": 170, 
          "faulty": "double sum=an;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(x) || (x <= 0.0)) {\n  ret=Double.NaN;\n}\n else {\n  double g=607.0 / 128.0;\n  double sum=0.0;\n  for (int i=lanczos.length - 1; i > 0; --i) {\n    sum=sum + (lanczos[i] / (x + i));\n  }\n  sum=sum + lanczos[0];\n  double tmp=x + g + .5;\n  ret=((x + .5) * Math.log(tmp)) - tmp + HALF_LOG_2_PI + Math.log(sum / x);\n}"
        }, 
        {
          "path": "src/java/org/apache/commons/math/special/Gamma.java", 
          "line": 180, 
          "faulty": "throw new MaxIterationsExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_103/src/java/org/apache/commons/math/special/Gamma.java\t2019-08-03 02:54:34.781327669 -0400\n+++ /tmp/RSRepair_Defects4J_Math_103/patches_3693/Patch_558/patched/org/apache/commons/math/special/Gamma.java\t2019-08-03 03:31:17.116602501 -0400\n@@ -167,7 +167,19 @@\n             // calculate series\n             double n = 0.0; // current element index\n             double an = 1.0 / a; // n-th element in the series\n-            double sum = an; // partial sum\n+            if (Double.isNaN(x) || (x <= 0.0)) {\n+\t\t\t\tret = Double.NaN;\n+\t\t\t} else {\n+\t\t\t\tdouble g = 607.0 / 128.0;\n+\t\t\t\tdouble sum = 0.0;\n+\t\t\t\tfor (int i = lanczos.length - 1; i > 0; --i) {\n+\t\t\t\t\tsum = sum + (lanczos[i] / (x + i));\n+\t\t\t\t}\n+\t\t\t\tsum = sum + lanczos[0];\n+\t\t\t\tdouble tmp = x + g + .5;\n+\t\t\t\tret = ((x + .5) * Math.log(tmp)) - tmp + HALF_LOG_2_PI + Math.log(sum / x);\n+\t\t\t}\n+\t\t\tdouble sum = an; // partial sum\n             while (Math.abs(an) > epsilon && n < maxIterations) {\n                 // compute next element in the series\n                 n = n + 1.0;\n@@ -177,7 +189,6 @@\n                 sum = sum + an;\n             }\n             if (n >= maxIterations) {\n-                throw new MaxIterationsExceededException(maxIterations);\n             } else {\n                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n             }\n\n\n"
    }
  ]
}