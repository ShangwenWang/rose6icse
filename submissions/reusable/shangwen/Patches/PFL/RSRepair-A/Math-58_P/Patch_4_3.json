{
  "repair_end": "2019-08-03 00:35:30.178551", 
  "repair_begin": "2019-08-02 23:58:47.656009", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java", 
          "line": 615, 
          "faulty": "if (fp < 0) {\n  paru=FastMath.min(paru,lmPar);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=rank; j < cols; ++j) {\n  lmDir[permutation[j]]=0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java", 
          "line": 593, 
          "faulty": "for (int j=0; j < solvedCols; ++j) {\n  int pj=permutation[j];\n  work1[pj]=work3[pj] * diag[pj] / dxNorm;\n}", 
          "type": "Delete", 
          "seed": "cost=FastMath.sqrt(cost);"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\t2019-08-03 02:57:06.112167041 -0400\n+++ /tmp/RSRepair_Defects4J_Math_58/patches_vk2l/Patch_3/patched/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\t2019-08-03 03:35:29.452318769 -0400\n@@ -589,11 +589,6 @@\n                 return;\n             }\n \n-            // compute the Newton correction\n-            for (int j = 0; j < solvedCols; ++j) {\n-                int pj = permutation[j];\n-                work1[pj] = work3[pj] * diag[pj] / dxNorm;\n-            }\n             for (int j = 0; j < solvedCols; ++j) {\n                 int pj = permutation[j];\n                 work1[pj] /= work2[j];\n@@ -612,9 +607,14 @@\n             // depending on the sign of the function, update parl or paru.\n             if (fp > 0) {\n                 parl = FastMath.max(parl, lmPar);\n-            } else if (fp < 0) {\n-                paru = FastMath.min(paru, lmPar);\n-            }\n+            } else {\n+\t\t\t\tfor (int j = rank; j < cols; ++j) {\n+\t\t\t\t\tlmDir[permutation[j]] = 0;\n+\t\t\t\t}\n+\t\t\t\tif (fp < 0) {\n+\t\t\t\t\tparu = FastMath.min(paru, lmPar);\n+\t\t\t\t}\n+\t\t\t}\n \n             // compute an improved estimate for lmPar\n             lmPar = FastMath.max(parl, lmPar + correction);\n\n\n"
    }
  ]
}