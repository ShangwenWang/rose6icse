{
  "repair_end": "2019-07-22 16:10:02.267928", 
  "repair_begin": "2019-07-22 16:00:25.973650", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\t2019-07-22 03:59:47.269723469 -0400\n+++ /tmp/Arja_Defects4J_Lang_7/patches_j21g/Patch_193/patched/org/apache/commons/lang3/event/EventListenerSupport.java\t2019-07-22 04:10:01.891393027 -0400\n@@ -138,7 +138,7 @@\n     public EventListenerSupport(Class<L> listenerInterface, ClassLoader classLoader) {\n         this();\n         Validate.notNull(listenerInterface, \"Listener interface cannot be null.\");\n-        Validate.notNull(classLoader, \"ClassLoader cannot be null.\");\n+        Validate.notNull(listenerInterface, \"Listener interface cannot be null.\");\n         Validate.isTrue(listenerInterface.isInterface(), \"Class {0} is not an interface\",\n                 listenerInterface.getName());\n         initializeTransientFields(listenerInterface, classLoader);\n@@ -274,7 +274,8 @@\n      * @param classLoader the class loader to be used\n      */\n     private void createProxy(Class<L> listenerInterface, ClassLoader classLoader) {\n-        proxy = listenerInterface.cast(Proxy.newProxyInstance(classLoader,\n+        Validate.isTrue(listenerInterface.isInterface(), \"Class {0} is not an interface\", listenerInterface.getName());\n+\t\tproxy = listenerInterface.cast(Proxy.newProxyInstance(classLoader,\n                 new Class[] { listenerInterface }, createInvocationHandler()));\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\t2019-07-22 03:59:50.861752000 -0400\n+++ /tmp/Arja_Defects4J_Lang_7/patches_j21g/Patch_193/patched/org/apache/commons/lang3/math/NumberUtils.java\t2019-07-22 04:10:01.899393109 -0400\n@@ -450,7 +450,6 @@\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n         if (str.startsWith(\"--\")) {\n-            return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java", 
          "line": 277, 
          "faulty": "proxy=listenerInterface.cast(Proxy.newProxyInstance(classLoader,new Class[]{listenerInterface},createInvocationHandler()));", 
          "type": "InsertBefore", 
          "seed": "Validate.isTrue(listenerInterface.isInterface(),\"Class {0} is not an interface\",listenerInterface.getName());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java", 
          "line": 141, 
          "faulty": "Validate.notNull(classLoader,\"ClassLoader cannot be null.\");", 
          "type": "Replace", 
          "seed": "Validate.notNull(listenerInterface,\"Listener interface cannot be null.\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java", 
          "line": 453, 
          "faulty": "return null;", 
          "type": "Delete", 
          "seed": "return toDouble(str,0.0d);"
        }
      ]
    }
  ]
}